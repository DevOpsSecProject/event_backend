# CI/CD pipeline
name: CI/CD Pipeline

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # checkouts the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4
      # sets up the ruby environment
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.0'
      # caches the gems
      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: |
            vendor/bundle
            ~/.bundle
          key: ${{runner.os}}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      # installs the dependencies
      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
      # rubocop for linting and checking for vulnerbilities
      - name: Run Rubocop (Ruby Linter)
        run: bundle exec rubocop --format progress
      # sets the bin files as executable
      - name: Set execute permissions for bin/rails
        run: chmod +x bin/rails
      # sets up the database
      - name: Setup Database
        run: |
          bin/rails db:create db:schema:load db:migrate
      # runs the rspec test
      - name: Run Tests
        run: |
          bundle exec rspec --exclude-pattern "spec/system/**/*_spec.rb"
        env:
          RAILS_ENV: test

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install system dependencies
            sudo apt-get update
            sudo apt-get install -y libyaml-dev libpq-dev libsqlite3-dev
            cd /var/www/event_backend
            
            # Check if repo exists, if not clone and pull the latest changes
            if [ -d ".git" ]; then
              git pull
            else
              git clone https://github.com/DevOpsSecProject/event_backend.git .
            fi
            
            # install dependencies and gems
            
            bundle config set --local path 'vendor/bundle'
            bundle install
            
            if [ ! -f "config/credentials.yml.enc" ]; then
              RAILS_ENV=production bundle exec rails db:setup
            else 
              RAILS_ENV=production bundle exec rails db:migrate
            fi
            
            sudo tee /etc/systemd/system/rails-app.service > /dev/null << EOL
            [Unit]
            Description=Rails API Backend
            After=network.target
            
            [Service]
            Type=simple
            User=$USER
            WorkingDirectory=/var/www/event_backend
            Environment=RAILS_ENV=production
            ExecStart=$(which bundle) exec rails server -b 0.0.0.0 -p 3000
            Restart=always
            
            [Install]
            WantedBy=multi-user.target
            EOL
            
            sudo systemctl daemon-reload
            sudo systemctl enable rails-app
            sudo systemctl restart nginx || echo "nginx not found, please install it"
