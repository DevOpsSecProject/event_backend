# CI/CD pipeline
name: CI/CD Pipeline

on: [push]
# Testing CI/CD Sean
jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      # checkouts the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4
      # sets up the ruby environment
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.0'
      # caches the gems
      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: |
            vendor/bundle
            ~/.bundle
          key: ${{runner.os}}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      # installs the dependencies
      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
      # rubocop for linting and checking for vulnerbilities
      - name: Run Rubocop (Ruby Linter)
        run: bundle exec rubocop --format progress
      # sets the bin files as executable
      - name: Set execute permissions for bin/rails
        run: chmod +x bin/rails
      # Run Bundler Audit to check for vulnerable gems
      - name: Run Bundler Audit (Gem Security Scan)
        run: bundle exec bundler-audit check --update
      # Run Brakeman to check for Rails security issues
      - name: Run Brakeman (Security Scanner)
        run: bundle exec brakeman -q --no-summary
      # sets up the database
      - name: Setup Database
        run: |
          bin/rails db:create db:schema:load db:migrate
      # runs the rspec test
      - name: Run Tests
        run: |
          bundle exec rspec --exclude-pattern "spec/system/**/*_spec.rb"
        env:
          RAILS_ENV: test

      - name: Deploy to EC2
        # Handle environment variables
        env:
          # SSH username
          EC2_USER: ${{ secrets.EC2_USER }}
          # Hostname and IP address for EC2 instance
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          # SSL settings
          SSL_DOMAIN: ${{ secrets.SSL_DOMAIN }}
          SSL_EMAIL: ${{ secrets.SSL_EMAIL }} # Personal Gmail been provided for now
          RAILS_ENV: ${{ secrets.RAILS_ENV || 'production' }}
        run: |
          # Write SSH key temporary file
          echo "${SSH_KEY}" > deploy_key.pem
          # Set proper permissions for SSH key
          chmod 600 deploy_key.pem
          # Securely copy deployment script to EC2
          scp -o StrictHostKeyChecking=no -i deploy_key.pem  script/deploy.sh ${EC2_USER}@${EC2_HOST}:~/deploy.sh
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem ${EC2_USER}@${EC2_HOST} "chmod +x ~/deploy.sh"
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem ${EC2_USER}@${EC2_HOST} "~/deploy.sh '${SECRET_KEY_BASE}' '${SSL_DOMAIN}' '${SSL_EMAIL}' '${RAILS_ENV}'"
          echo 'Deployment completed successfully'

