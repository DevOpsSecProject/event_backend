# CI/CD pipeline
name: CI/CD Pipeline

on: [push]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      # checkouts the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4
      # sets up the ruby environment
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.0'
      # caches the gems
      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: |
            vendor/bundle
            ~/.bundle
          key: ${{runner.os}}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      # installs the dependencies
      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
      # rubocop for linting and checking for vulnerbilities
      - name: Run Rubocop (Ruby Linter)
        run: bundle exec rubocop --format progress
      # sets the bin files as executable
      - name: Set execute permissions for bin/rails
        run: chmod +x bin/rails
      # Run Bundler Audit to check for vulnerable gems
      - name: Run Bundler Audit (Gem Security Scan)
        run: bundle exec bundler-audit check --update
      # Run Brakeman to check for Rails security issues
      - name: Run Brakeman (Security Scanner)
        run: bundle exec brakeman -q --no-summary || true
      # sets up the database
      - name: Setup Database
        run: |
          bin/rails db:create db:schema:load db:migrate
      # runs the rspec test
      - name: Run Tests
        run: |
          bundle exec rspec --exclude-pattern "spec/system/**/*_spec.rb"
        env:
          RAILS_ENV: test

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
        run: |
          echo "${SSH_KEY}" > deploy_key.pem
          chmod 600 deploy_key.pem
          scp -o StrictHostKeyChecking=no -i deploy_key.pem  script/deploy.sh ${EC2_USER}@${EC2_HOST}:~/deploy.sh
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem ${EC2_USER}@${EC2_HOST} "chmod +x ~/deploy.sh"
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem ${EC2_USER}@${EC2_HOST} "~/deploy.sh '${SECRET_KEY_BASE}'"
          echo 'Deployment completed successfully'

