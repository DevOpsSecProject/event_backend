# CI/CD pipeline
name: CI/CD Pipeline

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # checkouts the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4
      # sets up the ruby environment
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.0'
      # caches the gems
      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: |
            vendor/bundle
            ~/.bundle
          key: ${{runner.os}}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      # installs the dependencies
      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
      # rubocop for linting and checking for vulnerbilities
      - name: Run Rubocop (Ruby Linter)
        run: bundle exec rubocop --format progress
      # sets the bin files as executable
      - name: Set execute permissions for bin/rails
        run: chmod +x bin/rails
      # sets up the database
      - name: Setup Database
        run: |
          bin/rails db:create db:schema:load db:migrate
      # runs the rspec test
      - name: Run Tests
        run: |
          bundle exec rspec --exclude-pattern "spec/system/**/*_spec.rb"
        env:
          RAILS_ENV: test

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
        run: |
          echo "${EC2_SSH_KEY}" > deploy_key.pem
          chmod 600 deploy_key.pem
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem ${EC2_USER}@${EC2_HOST} "
            set -e
            # Clone repo if it doesn't exist otherwise pull latest changes
            if [ ! -d '/var/www/event_backend' ]; then
              sudo mkdir -p /var/www/event_backend
              sudo chown ${EC2_USER}:${EC2_USER} /var/www/event_backend
              git clone https://github.com/DevOpsSecProject/event_backend.git /var/www/event_backend
            else
              cd /var/www/event_backend
              git pull origin main
            fi
          
          # Install Dependencies
          cd /var/www/event_backend
          bundle config set --local path 'vendor/bundle'
          bundle install
          
          # Run migrations
          SECRET_KEY_BASE=${SECRET_KEY_BASE} RAILS_ENV=production bundle exec rails db:migrate
          
          # Restart Rails server (kill the current process running)
          pkill -f puma || true
          
          # Start sever as background proccess
          cd /var/www/event_backend
          SECRET_KEY_BASE=${SECRET_KEY_BASE} RAILS_ENV=production bundle exec rails server -b 0.0.0.0 -p 3000 > /var/www/event_backend/server.log 2>&1 &
          
          echo 'Deployment completed successfully'
        "
